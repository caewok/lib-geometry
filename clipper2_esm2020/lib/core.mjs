/*******************************************************************************
* Author    :  Angus Johnson                                                   *
* Date      :  19 September 2023                                               *
* Website   :  http://www.angusj.com                                           *
* Copyright :  Angus Johnson 2010-2023                                         *
* Purpose   :  Core structures and functions for the Clipper Library           *
* License   :  http://www.boost.org/LICENSE_1_0.txt                            *
*******************************************************************************/
import { PointInPolygonResult } from "./engine.mjs";
//
// Converted from C# implemention https://github.com/AngusJohnson/Clipper2/blob/main/CSharp/Clipper2Lib/Clipper.Core.cs
// Removed support for USINGZ
//
// Converted by ChatGPT 4 August 3 version https://help.openai.com/en/articles/6825453-chatgpt-release-notes
//
// Note: all clipping operations except for Difference are commutative.
export var ClipType;
(function (ClipType) {
    ClipType[ClipType["None"] = 0] = "None";
    ClipType[ClipType["Intersection"] = 1] = "Intersection";
    ClipType[ClipType["Union"] = 2] = "Union";
    ClipType[ClipType["Difference"] = 3] = "Difference";
    ClipType[ClipType["Xor"] = 4] = "Xor";
})(ClipType || (ClipType = {}));
export var PathType;
(function (PathType) {
    PathType[PathType["Subject"] = 0] = "Subject";
    PathType[PathType["Clip"] = 1] = "Clip";
})(PathType || (PathType = {}));
// By far the most widely used filling rules for polygons are EvenOdd
// and NonZero, sometimes called Alternate and Winding respectively.
// https://en.wikipedia.org/wiki/Nonzero-rule
export var FillRule;
(function (FillRule) {
    FillRule[FillRule["EvenOdd"] = 0] = "EvenOdd";
    FillRule[FillRule["NonZero"] = 1] = "NonZero";
    FillRule[FillRule["Positive"] = 2] = "Positive";
    FillRule[FillRule["Negative"] = 3] = "Negative";
})(FillRule || (FillRule = {}));
// PointInPolygon
export var PipResult;
(function (PipResult) {
    PipResult[PipResult["Inside"] = 0] = "Inside";
    PipResult[PipResult["Outside"] = 1] = "Outside";
    PipResult[PipResult["OnEdge"] = 2] = "OnEdge";
})(PipResult || (PipResult = {}));
export class Path64 extends Array {
}
export class Paths64 extends Array {
}
export class Rect64 {
    constructor(lOrIsValidOrRec, t, r, b) {
        if (typeof lOrIsValidOrRec === 'boolean') {
            if (lOrIsValidOrRec) {
                this.left = 0;
                this.top = 0;
                this.right = 0;
                this.bottom = 0;
            }
            else {
                this.left = Number.MAX_SAFE_INTEGER;
                this.top = Number.MAX_SAFE_INTEGER;
                this.right = Number.MIN_SAFE_INTEGER;
                this.bottom = Number.MIN_SAFE_INTEGER;
            }
        }
        else if (typeof lOrIsValidOrRec === 'number') {
            this.left = lOrIsValidOrRec;
            this.top = t;
            this.right = r;
            this.bottom = b;
        }
        else {
            this.left = lOrIsValidOrRec.left;
            this.top = lOrIsValidOrRec.top;
            this.right = lOrIsValidOrRec.right;
            this.bottom = lOrIsValidOrRec.bottom;
        }
    }
    get width() {
        return this.right - this.left;
    }
    set width(value) {
        this.right = this.left + value;
    }
    get height() {
        return this.bottom - this.top;
    }
    set height(value) {
        this.bottom = this.top + value;
    }
    isEmpty() {
        return this.bottom <= this.top || this.right <= this.left;
    }
    midPoint() {
        return new Point64((this.left + this.right) / 2, (this.top + this.bottom) / 2);
    }
    contains(pt) {
        return pt.x > this.left && pt.x < this.right && pt.y > this.top && pt.y < this.bottom;
    }
    containsRect(rec) {
        return rec.left >= this.left && rec.right <= this.right && rec.top >= this.top && rec.bottom <= this.bottom;
    }
    intersects(rec) {
        return (Math.max(this.left, rec.left) <= Math.min(this.right, rec.right)) &&
            (Math.max(this.top, rec.top) <= Math.min(this.bottom, rec.bottom));
    }
    asPath() {
        const result = new Path64();
        result.push(new Point64(this.left, this.top));
        result.push(new Point64(this.right, this.top));
        result.push(new Point64(this.right, this.bottom));
        result.push(new Point64(this.left, this.bottom));
        return result;
    }
}
export var MidpointRounding;
(function (MidpointRounding) {
    MidpointRounding[MidpointRounding["ToEven"] = 0] = "ToEven";
    MidpointRounding[MidpointRounding["AwayFromZero"] = 1] = "AwayFromZero";
})(MidpointRounding || (MidpointRounding = {}));
export function midPointRound(value, mode = MidpointRounding.ToEven) {
    const factor = Math.pow(10, 0);
    value *= factor;
    let rounded;
    if (mode === MidpointRounding.AwayFromZero) {
        rounded = (value > 0) ? Math.floor(value + 0.5) : Math.ceil(value - 0.5);
    }
    else {
        // For MidpointRounding.ToEven, use the default JavaScript rounding
        rounded = Math.round(value);
    }
    return rounded / factor;
}
export class Point64 {
    constructor(xOrPt, yOrScale) {
        if (typeof xOrPt === 'number' && typeof yOrScale === 'number') {
            this.x = midPointRound(xOrPt, MidpointRounding.AwayFromZero);
            this.y = midPointRound(yOrScale, MidpointRounding.AwayFromZero);
        }
        else {
            const pt = xOrPt;
            if (yOrScale !== undefined) {
                this.x = midPointRound(pt.x * yOrScale, MidpointRounding.AwayFromZero);
                this.y = midPointRound(pt.y * yOrScale, MidpointRounding.AwayFromZero);
            }
            else {
                this.x = pt.x;
                this.y = pt.y;
            }
        }
    }
    static equals(lhs, rhs) {
        return lhs.x === rhs.x && lhs.y === rhs.y;
    }
    static notEquals(lhs, rhs) {
        return lhs.x !== rhs.x || lhs.y !== rhs.y;
    }
    static add(lhs, rhs) {
        return new Point64(lhs.x + rhs.x, lhs.y + rhs.y);
    }
    static subtract(lhs, rhs) {
        return new Point64(lhs.x - rhs.x, lhs.y - rhs.y);
    }
    toString() {
        return `${this.x},${this.y} `;
    }
    equals(obj) {
        if (obj instanceof Point64) {
            return Point64.equals(this, obj);
        }
        return false;
    }
}
export class InternalClipper {
    static checkPrecision(precision) {
        if (precision < -8 || precision > 8)
            throw new Error(this.precision_range_error);
    }
    static isAlmostZero(value) {
        return (Math.abs(value) <= this.floatingPointTolerance);
    }
    static crossProduct(pt1, pt2, pt3) {
        return ((pt2.x - pt1.x) * (pt3.y - pt2.y) - (pt2.y - pt1.y) * (pt3.x - pt2.x));
    }
    static dotProduct(pt1, pt2, pt3) {
        return ((pt2.x - pt1.x) * (pt3.x - pt2.x) + (pt2.y - pt1.y) * (pt3.y - pt2.y));
    }
    static checkCastInt64(val) {
        if ((val >= this.max_coord) || (val <= this.min_coord))
            return this.Invalid64;
        return midPointRound(val, MidpointRounding.AwayFromZero);
    }
    static getIntersectPoint(ln1a, ln1b, ln2a, ln2b) {
        const dy1 = ln1b.y - ln1a.y;
        const dx1 = ln1b.x - ln1a.x;
        const dy2 = ln2b.y - ln2a.y;
        const dx2 = ln2b.x - ln2a.x;
        const det = dy1 * dx2 - dy2 * dx1;
        let ip;
        if (det === 0.0) {
            ip = new Point64(0, 0);
            return { ip, success: false };
        }
        const t = ((ln1a.x - ln2a.x) * dy2 - (ln1a.y - ln2a.y) * dx2) / det;
        if (t <= 0.0)
            ip = ln1a;
        else if (t >= 1.0)
            ip = ln1b;
        // NB: truncate the result instead of rounding it, to make the C# version work similarly to the C++ and Delphi versions
        else
            ip = new Point64(Math.trunc(ln1a.x + t * dx1), Math.trunc(ln1a.y + t * dy1));
        return { ip, success: true };
    }
    static segsIntersect(seg1a, seg1b, seg2a, seg2b, inclusive = false) {
        if (inclusive) {
            const res1 = InternalClipper.crossProduct(seg1a, seg2a, seg2b);
            const res2 = InternalClipper.crossProduct(seg1b, seg2a, seg2b);
            if (res1 * res2 > 0)
                return false;
            const res3 = InternalClipper.crossProduct(seg2a, seg1a, seg1b);
            const res4 = InternalClipper.crossProduct(seg2b, seg1a, seg1b);
            if (res3 * res4 > 0)
                return false;
            return (res1 !== 0 || res2 !== 0 || res3 !== 0 || res4 !== 0);
        }
        else {
            return (InternalClipper.crossProduct(seg1a, seg2a, seg2b) * InternalClipper.crossProduct(seg1b, seg2a, seg2b) < 0) &&
                (InternalClipper.crossProduct(seg2a, seg1a, seg1b) * InternalClipper.crossProduct(seg2b, seg1a, seg1b) < 0);
        }
    }
    static getClosestPtOnSegment(offPt, seg1, seg2) {
        if (seg1.x === seg2.x && seg1.y === seg2.y)
            return seg1;
        const dx = seg2.x - seg1.x;
        const dy = seg2.y - seg1.y;
        let q = ((offPt.x - seg1.x) * dx + (offPt.y - seg1.y) * dy) / ((dx * dx) + (dy * dy));
        if (q < 0)
            q = 0;
        else if (q > 1)
            q = 1;
        // use MidpointRounding.ToEven in order to explicitly match the nearbyint behaviour on the C++ side
        return new Point64(seg1.x + midPointRound(q * dx, MidpointRounding.ToEven), seg1.y + midPointRound(q * dy, MidpointRounding.ToEven));
    }
    static pointInPolygon(pt, polygon) {
        const len = polygon.length;
        let start = 0;
        if (len < 3)
            return PointInPolygonResult.IsOutside;
        while (start < len && polygon[start].y === pt.y)
            start++;
        if (start === len)
            return PointInPolygonResult.IsOutside;
        let d = 0;
        let isAbove = polygon[start].y < pt.y;
        const startingAbove = isAbove;
        let val = 0;
        let i = start + 1;
        let end = len;
        for (;;) {
            if (i === end) {
                if (end === 0 || start === 0)
                    break;
                end = start;
                i = 0;
            }
            if (isAbove) {
                while (i < end && polygon[i].y < pt.y)
                    i++;
                if (i === end)
                    continue;
            }
            else {
                while (i < end && polygon[i].y > pt.y)
                    i++;
                if (i === end)
                    continue;
            }
            const curr = polygon[i];
            const prev = i > 0 ? polygon[i - 1] : polygon[len - 1];
            if (curr.y === pt.y) {
                if (curr.x === pt.x || (curr.y === prev.y && (pt.x < prev.x !== pt.x < curr.x)))
                    return PointInPolygonResult.IsOn;
                i++;
                if (i === start)
                    break;
                continue;
            }
            if (pt.x < curr.x && pt.x < prev.x) {
                // we're only interested in edges crossing on the left
            }
            else if (pt.x > prev.x && pt.x > curr.x) {
                val = 1 - val; // toggle val
            }
            else {
                d = InternalClipper.crossProduct(prev, curr, pt);
                if (d === 0)
                    return PointInPolygonResult.IsOn;
                if ((d < 0) === isAbove)
                    val = 1 - val;
            }
            isAbove = !isAbove;
            i++;
        }
        if (isAbove !== startingAbove) {
            if (i === len)
                i = 0;
            else
                d = InternalClipper.crossProduct(polygon[i - 1], polygon[i], pt);
            if (d === 0)
                return PointInPolygonResult.IsOn;
            if ((d < 0) === isAbove)
                val = 1 - val;
        }
        if (val === 0)
            return PointInPolygonResult.IsOutside;
        return PointInPolygonResult.IsInside;
    }
}
InternalClipper.MaxInt64 = 9223372036854775807;
InternalClipper.MaxCoord = InternalClipper.MaxInt64 / 4;
InternalClipper.max_coord = InternalClipper.MaxCoord;
InternalClipper.min_coord = -InternalClipper.MaxCoord;
InternalClipper.Invalid64 = InternalClipper.MaxInt64;
InternalClipper.defaultArcTolerance = 0.25;
InternalClipper.floatingPointTolerance = 1E-12;
InternalClipper.defaultMinimumEdgeLength = 0.1;
InternalClipper.precision_range_error = "Error: Precision is out of range.";
//# sourceMappingURL=data:application/json;base64,